basePath: /
definitions:
  main.Author:
    properties:
      books:
        items:
          $ref: '#/definitions/main.Book'
        type: array
      country:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  main.Book:
    properties:
      author:
        $ref: '#/definitions/main.Author'
      author_id:
        type: integer
      genre:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  main.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  main.TokenResponse:
    properties:
      token:
        type: string
    type: object
  main.User:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: This is a sample server for a library.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://example.com/terms/
  title: Library API
  version: "1.0"
paths:
  /authors:
    get:
      description: Get list of all authors
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by country
        in: query
        name: country
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Author'
            type: array
      security:
      - BearerAuth: []
      summary: Get all authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      description: Create a new author
      parameters:
      - description: Author to create
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/main.Author'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Author'
      security:
      - BearerAuth: []
      summary: Create a new author
      tags:
      - authors
  /authors/{id}:
    delete:
      description: Delete an author by ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an author
      tags:
      - authors
    get:
      description: Get a single author by ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Author'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get author by ID
      tags:
      - authors
    put:
      consumes:
      - application/json
      description: Update an existing author
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      - description: Author to update
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/main.Author'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Author'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing author
      tags:
      - authors
  /books:
    get:
      description: Get list of all books
      parameters:
      - description: Filter by title
        in: query
        name: title
        type: string
      - description: Filter by genre
        in: query
        name: genre
        type: string
      - description: Filter by author ID
        in: query
        name: author_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Book'
            type: array
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book
      parameters:
      - description: Book to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/main.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Book'
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Delete a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      description: Get a single book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book to update
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/main.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing book
      tags:
      - books
  /login:
    post:
      consumes:
      - application/json
      description: Login and get token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Login
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
